// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL")
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
  Purchase Purchase[]
}

model Purchase {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  bookId   String   @map("book_id")
  createdAt   DateTime @map("created_at")
  updatedAt   DateTime @map("updated_at")

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Book @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@map("purchases")
}

model Book {
  id          String   @id @default(cuid())
  title       String
  price       Int
  thumbnail   String
  authorId    String   @map("author_id")
  content String
  createdAt   DateTime @map("created_at")
  updatedAt   DateTime @map("updated_at")

  purchases Purchase[]
  author    Author @relation(fields: [authorId], references: [id])

  @@map("books")
}

model Author {
  id String @id @default(cuid())
  name String
  description String
  profile_icon String

  Book Book[]

  @@map("authors")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
